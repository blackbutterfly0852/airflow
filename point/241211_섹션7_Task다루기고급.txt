[241211(수) 07-1.Task 분기처리(BranchPythonOperator)] - 자주사용
0. dags_branch_python_operator.py
1. python_branch_task 수행 이후 xcom 내 skipmixin_key 하면 후행에 어떤 task들이 수행되었는지 알 수 있음

[241211(수) 07-2.Task 분기처리(task.branch)] - 자주사용
0. dags_branch_python_operator_2.py
1. @task.branch 객채 == BranchPythonOperator 객체

[241211(수) 07-3.Task 분기처리(BaseBranchOperator)] - 거의 사용 X
0. dags_base_branch_operator.py
1. python은 class CustomBranchOperator(BaseBranchOperator): # 다중 상속이 가능하나, 한 개의 클래스만 상속 받는 것을 권고
2. choose_branch


[241211(수) 07-4.Trigger Rule]
0. dags_python_with_trigger_rule_eg1.py, dags_python_with_trigger_rule_eg2.py
1. 하위 task에 설정, 상위 task의 결과에 따라 하위 task를 수행하고 싶은 경우
2. 모든 operator는 trigger rule 파라미터를 가지고 있음

[241211(수) 07-5.Task Group]
0. dags_python_with_task_group.py
1. Dag 내 task가 많을 경우, 비슷한 task끼리 Group > 관리 차원, 성능 이점이 있는 건 아님
2. 데커레이터(docstring) & 클래스(tootip)
2. docstring == tooltip

[241211(수) 07-6.Edge label]
0. dags_empty_with_edge_label.py
1. task 연결에 대한 설명 (comment)