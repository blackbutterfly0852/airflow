[241216(월) 10-1.센서의개념]

1. 일종의 특화된 Operator : Sensor < BaseSensorOperator < BaseOperator
가. __init()__, poke(context) 필수 오버라이딩
나. excute 함수 내 self.poke(context)를 while문으로 반복실행, excute 함수는 오버라이딩 필수 X
2. poke parameter
가. soft_fail : True? time_out에 의해 실패로 되었을 때 스킵으로 표시
나. poke_interval : 체킹주기
다. time_out : 체킹하다가 언제 실패로 할 것인가?
라. (중요)  mode
    1) poke :  짧은 센싱 간격 (초 단위), running
    2) reschedule : 긴 센싱 간격 (분 단위), up_for_reschedule
라. exponential_backoff : True? 2의 지수승만큼 체킹하는 주기가 늘어남
마. max_wait : exponential_backoff True일 경우 너무 늘어나는 걸 방지 위해 제한

3. pool
가. task 1개당 slot 1개, slot의 모임 = pool
나. 종류
    1) running slot : poke 모드는 항상 running slot을 차지하고 있음
    2) queued slot
    3) scheduled slot
다. airflow를 안정적으로 운영하는 입장에서는 중요


[241216(월) 10-2.Bash 센서]
0. dag_bash_sensor.py
1. bash_command 내 exit 0을 작성하면 true 리턴 (1~255 false, 'echo $?'로 확인가능)

[241216(월) 10-3.File 센서]
0. dag_file_sensor.py
1. glob
가. glob('/home/dwkim/docker-compose.yaml') # 일반적으로 file sensor를 사용시 파일명까지 명시
나. glob('/home/dwkim/**', recursive = True) # dwkim 밑에 있는 모든 파일, 디렉토리들을 찾아서 List로 리턴, full_path 경로에 ** 필요

2. connections 등록 필요
가. connection_id = conn_file_opt_airflow_files
나. extras = {"path" : "/opt/airflow/files"}

[241217(화) 10-4.Python 센서]
0. dags_python_sensor.py
1. Python_operator랑 비슷
가. 파라미터 중 딕셔너리 형태로 파이썬 함수에 전달할 때 templates_dict 보다는 op_kwargs를 더 많이 사용
2. sensor는 범용적으로 사용할 수 있도록 작성