[241212(목) 08-1.오퍼레이터 더보기]
1. BaseOperator(중요)
가. execute : 재정의(오버라이딩) 필요
나. Airflow를 잘 사용하기 위해, BaseOperator을 상속/개발 하는 것에 익숙

[241212(목) 08-2.TriggerDagRun 오퍼레이터의 사본]
0. dags_trigger_dag_run_operator.py
1. Dag 간 의존관계 
가. Trigger Dag run : Dag 내 task를 통해 다른 Dag 실행 (선행 Dag이 하나일 경우)
나. ExternalTask Sensor :  다른 Dag의 결과를 보고 나의 Dag을 수행 (선행 Dag이 여러 개일 경우)

[241213(금) 08-3(2).SimpleHttp오퍼레이터 실습]
1. SimpleHttpOperator : return값은 xcom에 저장
2. 서울시 공공데이터의 경우 1000행 부터 오류 발생 가능성 있음

[241213(금) 08-4.CustomOperator]
1. Airflow 꽃
2. BaseOperator 필수 오버라이딩
가. 생성자 : def __init__ , 파라미터 및 초기값 지정
나. 비즈니스 로직 : def excute(self, context)
3. Tempate 사용 가능한 파라미터 지정하기
4. 
def __init__ (self, name:str, **kwargs):
    super() __init__(**kwargs) : 부모클래스(BaseOperator)의 생성자 호출

hello_task = HelloOperator(
    task_id = '' #task_id 명시적으로 __init__ 파라미터에 없기 때문에 kwargs 내 Key:Value 값으로 Capture
)
5. 장점
가. 원하는대로 로직 작성 가능
나. 비효율성 제거, 재사용성 : 특정 기능을 하는 모듈을 만들어 놓고, 상세조건은 파라미터로 받게끔하여 모듈을 재사용할 수 있도록 유도

