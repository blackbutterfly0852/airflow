[05-1.Jinja템플릿]
1. 
가. 문서(파일)에서 특정 양식으로 작성된 값을 런타임시 실제 값으로 치환해주는 처리 엔진
나. 오퍼레이터 파라미터 입력시 중괄호 {} 2개를 이용하면 Airflow에서 기본적으로 제공하는 변수들을 치환된 갓으로 입력할 수 있음

2. https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html
가. {{ data_interval_start }}
나. {{ data_interval_end }}
다. {{ logical_date }}

3. https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/index.html
가. Jinja템플릿은 모든 오퍼레이터, 모든 파라미터에 사용할 수 있는 것이 아님
나. bash_command (str | airflow.utils.types.ArgNotSet) ? The command, set of commands or reference to a Bash script (must be ‘.sh’ or ‘.bash’) to be executed. (templated)
다. template_fields: Sequence[str]= ('bash_command', 'env', 'cwd')[source]


[05-2.Bash오퍼레이터with Template]
[05-3.Airflow의 날짜개념] >> 다시 공부
1. Airflow ETL 시간 사상 :  데이터 관점
가. 배치수행일자 : {{ data_interval_end }} > 간격의 시작시점
나. 이전배치수행일자 : {{ data_interval_start, ds, ts, logical_date }}
  1) 데이터 관점에서의 시작일자 이자 이전 배치 수행일자
[05-4. 파이썬 오퍼레이터 with Template]
1. pythonOperator 생성해서 op_kwargs에 Jinja 템플릿 직접 대입
2. (추천) task 데코레이터 **op_kwargs에 이미 존재하는 Jinja 템플릿 활용

[05-5. Bash오퍼레이터With macro]
1. macro
가. 템플릿 엔진에서 날짜를 사용하는데, 날짜계산이 필요한 경우
나. macro.datetime, macro.dateutil 익숙 (파이썬 라이브러리 참고) > 's'는 연산!
다. venv ) pip install jupyter, pip -m notebook

[05-6.Python오퍼레이터With macro]
1. dags_python_with_macro.py
2. task_decorator 내 tmplates_dict (K,V) or  함수 내에서 직접연산 >  가독성은 함수 내에서 직접 import 후 연산하는 것이 좋아보임